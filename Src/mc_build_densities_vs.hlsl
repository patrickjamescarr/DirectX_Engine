// marching cubes build densities vertex shader

cbuffer MatrixBuffer : register(b0)
{
    matrix worldMatrix;
    matrix viewMatrix;
    matrix projectionMatrix;
};

struct VSInput
{
    float4 position     : POSITION;
    float2 tex          : TEXCOORD;
    float3 screenPos    : NORMAL;
    uint   nInstanceID  : SV_InstanceID;   // generated by the vertex shader. each slice is an instance
    uint   vI           : SV_VertexId;
};

struct VSOutput
{
    float4 position     : POSITION;
    float4 wsPosition   : TEXCOORD;
    //float2 tex          : TEXCOORD1;
    uint   nInstanceID  : SLICEINDEX;
};

VSOutput main(VSInput input)
{


    VSOutput output;

    //float2 texcoord = float2(input.vI & 1, input.vI >> 1);

    //output.tex = texcoord;

    //output.position = float4((texcoord.x - 0.5f) * 2, -(texcoord.y - 0.5f) * 2, 0, 1);

    //output.wsPosition = float4(input.tex.xy, input.nInstanceID * (1.0f / 10.0f), 1.0f);

    // float3 chunkCoord = float3(input.tex.xy, input.nInstanceID * (1.0f / 10.0f));

    

    // HACK #1 - because in DX, when you render a quad with uv's in [0..1],
    //           the upper left corner will be a 0 and the lower right
    //           corner will be at 1 (it should be at 63/64, or whatever).
    // chunkCoord.xyz *= (10.0f * 0.03f);

    

    //output.position = float4(input.screenPos.xyz, 1);
    //output.position.y *= -1;

    //// Change the position vector to be 4 units for proper matrix calculations.
    //input.position.w = 1.0f;
    //input.position.z = 1.0f;

    // Calculate the position of the vertex against the world, view, and projection matrices.
    output.position = mul(input.position, worldMatrix);
    output.position = mul(output.position, viewMatrix);
    output.position = mul(output.position, projectionMatrix);

    float3 chunkCoord = float3(input.tex.xy, input.nInstanceID * (1.0f / 10.0f));

    output.wsPosition = float4(chunkCoord, 1);

    //output.tex = input.tex;

    //output.position = float4(output.position.xy, 0.5, 1);
    ////output.position.y *= -1;

    output.nInstanceID = input.nInstanceID;

    return output;
}